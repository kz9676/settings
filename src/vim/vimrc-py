" ============================================================================
" Pathogen
" ============================================================================

" Install pathogen:
" cd ~/.vim/bundle
" git clone https://github.com/tpope/vim-pathogen
"
execute pathogen#infect()

" ============================================================================
" Vundle
" ============================================================================

" Vundle (the vim plugin bundler)
let iCanHazVundle=1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')
if !filereadable(vundle_readme)
    echo "Installing Vundle..."
    echo ""
    silent !mkdir -p ~/.vim/bundle
    silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
    let iCanHazVundle=0
endif
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" ============================================================================
" Vim plugins
" ============================================================================

"Pathogen
Bundle 'tpope/vim-pathogen'
" Python documentation plugin 
Bundle 'vim-scripts/pydoc.vim'
" Markdown table of contents
Bundle 'mzlogin/vim-markdown-toc'
" Vundle
Bundle 'gmarik/vundle'
" Python virtualenv
Bundle 'jmcantrell/vim-virtualenv'
" Python and PHP Debugger
Bundle 'jaredly/vim-debug'
" Better file browser
Bundle 'scrooloose/nerdtree'
" Code commenter
Bundle 'scrooloose/nerdcommenter'
" Class/module browser
Bundle 'majutsushi/tagbar'
" Code and files fuzzy finder
Bundle 'kien/ctrlp.vim'
" Extension to ctrlp, for fuzzy command finder
Bundle 'dev/vim-ctrlp-cmdpalette'
" Zen coding
Bundle 'mattn/emmet-vim'
" Git integration
Bundle 'motemen/git-vim'
" Tab list panel
Bundle 'kien/tabman.vim'
" Airline
Bundle 'vim-airline/vim-airline'
Bundle 'vim-airline/vim-airline-themes'
" Consoles as buffers
Bundle 'rosenfeld/conque-term'
" Pending tasks list
Bundle 'dev/FixedTaskList.vim'
" Surround
Bundle 'tpope/vim-surround'
" Autoclose
Bundle 'Townk/vim-autoclose'
" Indent text object
Bundle 'michaeljsmith/vim-indent-object'
" Python mode (indentation, doc, refactor, lints, code checking, motion and
" operators, highlighting, run and ipdb breakpoints)
Bundle 'klen/python-mode'
" Better autocompletion
Bundle 'ycm-core/YouCompleteMe'
" Snippets manager (SnipMate), dependencies, and snippets repo
Bundle 'MarcWeber/vim-addon-mw-utils'
Bundle 'tomtom/tlib_vim'
Bundle 'honza/vim-snippets'
Bundle 'garbas/vim-snipmate'
" Git/mercurial/others diff icons on the side of the file lines
Bundle 'mhinz/vim-signify'
" Automatically sort python imports
Bundle 'dev/vim-isort'
" Drag visual blocks arround
Bundle 'dev/dragvisuals.vim'
" Window chooser
Bundle 't9md/vim-choosewin'
" Python and other languages code checker
Bundle 'scrooloose/syntastic'
" Paint css colors with the real color
Bundle 'lilydjwg/colorizer'
" Distraction-free writing
Bundle 'junegunn/limelight.vim'
Bundle 'junegunn/goyo.vim'
Bundle 'junegunn/seoul256.vim'
" Recently opened files
Bundle 'yegappan/mru'
" A Writer environment emulator for Markdown, reStructuredText and text files
Bundle 'amix/vim-zenroom2'
" Git wrapper
Bundle 'tpope/vim-fugitive'
" Commentary plugin 
Bundle 'tpope/vim-commentary'
" DrawIt plugin 
Bundle 'vim-scripts/drawit'
" JavaScript supprt
Bundle 'jelera/vim-javascript-syntax'
Bundle 'pangloss/vim-javascript'
Bundle 'nathanaelkane/vim-indent-guides'
Bundle 'Raimondi/delimitMate'
Bundle 'michalliu/jsruntime.vim'
Bundle 'michalliu/jsoncodecs.vim'
Bundle 'michalliu/sourcebeautify.vim'
Bundle 'maksimr/vim-jsbeautify'
Bundle 'einars/js-beautify'
Bundle 'moll/vim-node'
" Autoformat
Bundle 'Chiel92/vim-autoformat'
" Relative numbering of lines (0 is the current line)
Bundle 'myusuf3/numbers.vim'
" Search results counter
Bundle 'IndexedSearch'
" XML/HTML tags navigation
Bundle 'matchit.zip'
" Yank history navigation
Bundle 'YankRing.vim'
" Bash support 
Bundle 'vim-scripts/bash-support.vim'
" Install plugins the first time vim runs
if iCanHazVundle == 0
    echo "Installing Bundles, please ignore key map error messages"
    echo ""
    :BundleInstall
endif
" C support 
Bundle 'WolfgangMehner/c-support'
" Ctags 
Bundle 'ntnn/vim-ctagser'
" Gutentags
Bundle 'ludovicchabant/vim-gutentags'
" AWS CloudFormation linter 
Bundle 'speshak/vim-cfn'
" YAML format 
Bundle 'tarekbecker/vim-yaml-formatter'
Bundle 'stephpy/vim-yaml'
"Go To Header plugin 
Bundle 'Yohannfra/Vim-Goto-Header'
" Clang autocompletion 
Bundle 'xavierd/clang_complete'

" ============================================================================
" Vim settings and mappings
" ============================================================================

filetype off
set nocompatible
set nobackup
set backupcopy=yes

" allow plugins by file type (required for plugins)
filetype plugin on
filetype indent on

" tabs and spaces handling
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4

" tab length exceptions on some file types
autocmd FileType html setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType htmldjango setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2 softtabstop=2

" always show status bar
set ls=2

" incremental search
set incsearch

" highlighted search results
set hlsearch

" syntax highlight on
syntax on

" show line numbers
set nu

" tab navigation mappings
map tn :tabn<CR>
map tp :tabp<CR>
map tm :tabm 
map tt :tabnew 
map ts :tab split<CR>
map <C-S-Right> :tabn<CR>
imap <C-S-Right> <ESC>:tabn<CR>
map <C-S-Left> :tabp<CR>
imap <C-S-Left> <ESC>:tabp<CR>

" navigate windows with meta+arrows
map <M-Right> <c-w>l
map <M-Left> <c-w>h
map <M-Up> <c-w>k
map <M-Down> <c-w>j
imap <M-Right> <ESC><c-w>l
imap <M-Left> <ESC><c-w>h
imap <M-Up> <ESC><c-w>k
imap <M-Down> <ESC><c-w>j

" old autocomplete keyboard shortcut
imap <C-J> <C-X><C-O>

" Comment this line to enable autocompletion preview window
" (displays documentation related to the selected completion option)
" Disabled by default because preview makes the window flicker
set completeopt-=preview

" save as sudo
ca w!! w !sudo tee "%"

" simple recursive grep
command! -nargs=1 RecurGrep lvimgrep /<args>/gj ./**/*.* | lopen | set nowrap
command! -nargs=1 RecurGrepFast silent exec 'lgrep! <q-args> ./**/*.*' | lopen

" mappings to call them
nmap ,R :RecurGrep 
nmap ,rf :RecurGrepFast 

" mappings to call them with the default word as search text
nmap ,wR :RecurGrep <cword><CR>
nmap ,wr :RecurGrepFast <cword><CR>

" use 256 colors when possible
if &term =~? 'mlterm\|xterm\|xterm-256\|screen-256'
    let &t_Co = 256
    colorscheme industry 
else
    colorscheme industry 
endif

" auto indent
set autoindent

" when scrolling, keep cursor 3 lines away from screen border
set scrolloff=3

" autocompletion of files and commands behaves like shell
" (complete only the common part, list the options that match)
set wildmode=list:longest

" better backup, swap and undos storage
set directory=~/.vim/dirs/tmp     " directory to place swap files in
set backup                        " make backup files
set backupdir=~/.vim/dirs/backups " where to put backup files
set undofile                      " undo after you re-open the file
set undodir=~/.vim/dirs/undos
set viminfo+=n~/.vim/dirs/viminfo

" store yankring history file
let g:yankring_history_dir = '~/.vim/dirs/'

" create needed directories, if they don't exist
if !isdirectory(&backupdir)
    call mkdir(&backupdir, "p")
endif
if !isdirectory(&directory)
    call mkdir(&directory, "p")
endif
if !isdirectory(&undodir)
    call mkdir(&undodir, "p")
endif

" ============================================================================
" Bundles settings and mappings
" ============================================================================

" Tagbar---------------------------------------------------------------------- 

" toggle tagbar display
map <F4> :TagbarToggle<CR>

" autofocus on tagbar open
let g:tagbar_autofocus = 0
autocmd FileType c call tagbar#autoopen(0)
autocmd FileType cpp call tagbar#autoopen(0)
autocmd FileType sh call tagbar#autoopen(0)
autocmd FileType python call tagbar#autoopen(0)
autocmd FileType javascript call tagbar#autoopen(0)
autocmd FileType vim call tagbar#autoopen(0)

" NERDTree ------------------------------------------------------------------- 

" toggle nerdtree display
map <F3> :NERDTreeToggle<CR>

" open nerdtree with the current file selected
nmap ,t :NERDTreeFind<CR>

" don;t show these file types
let NERDTreeIgnore = ['\.pyc$', '\.pyo$']

" Tasklist -------------------------------------------------------------------

" show pending tasks list
map <F2> :TaskList<CR>

" Vim-debug ------------------------------------------------------------------

" disable default mappings, have a lot of conflicts with other plugins
let g:vim_debug_disable_mappings = 1

" add some useful mappings
map <F5> :Dbg over<CR>
map <F6> :Dbg into<CR>
map <F7> :Dbg out<CR>
map <F8> :Dbg here<CR>
map <F9> :Dbg break<CR>
map <F10> :Dbg watch<CR>
map <F11> :Dbg down<CR>
map <F12> :Dbg up<CR>

" CtrlP ----------------------------------------------------------------------

" file finder mapping
let g:ctrlp_map = ',e'

" tags (symbols) in current file finder mapping
nmap ,g :CtrlPBufTag<CR>

" tags (symbols) in all files finder mapping
nmap ,G :CtrlPBufTagAll<CR>

" general code finder in all files mapping
nmap ,f :CtrlPLine<CR>

" recent files finder mapping
nmap ,m :CtrlPMRUFiles<CR>

" commands finder mapping
nmap ,c :CtrlPCmdPalette<CR>

" to be able to call CtrlP with default search text
function! CtrlPWithSearchText(search_text, ctrlp_command_end)
    execute ':CtrlP' . a:ctrlp_command_end
    call feedkeys(a:search_text)
endfunction

" same as previous mappings, but calling with current word as default text
nmap ,wg :call CtrlPWithSearchText(expand('<cword>'), 'BufTag')<CR>
nmap ,wG :call CtrlPWithSearchText(expand('<cword>'), 'BufTagAll')<CR>
nmap ,wf :call CtrlPWithSearchText(expand('<cword>'), 'Line')<CR>
nmap ,we :call CtrlPWithSearchText(expand('<cword>'), '')<CR>
nmap ,pe :call CtrlPWithSearchText(expand('<cfile>'), '')<CR>
nmap ,wm :call CtrlPWithSearchText(expand('<cword>'), 'MRUFiles')<CR>
nmap ,wc :call CtrlPWithSearchText(expand('<cword>'), 'CmdPalette')<CR>

" don't change working directory
let g:ctrlp_working_path_mode = 0

" ignore these files and folders on file finder
let g:ctrlp_custom_ignore = {
            \ 'dir':  '\v[\/](\.git|\.hg|\.svn)$',
            \ 'file': '\.pyc$\|\.pyo$',
            \ }

" Syntastic ------------------------------------------------------------------

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_cpp_no_default_include_dirs = 1

" show list of errors and warnings on the current file
nmap <leader>e :Errors<CR>

" check also when just opened the file
let g:syntastic_check_on_open = 1

" don't put icons on the sign column (it hides the vcs status icons of signify)
let g:syntastic_enable_signs = 1

" custom icons (enable them if you use a patched font, and enable the previous 
" setting)
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'
let g:syntastic_style_error_symbol = '✗'
let g:syntastic_style_warning_symbol = '⚠'

" Python-mode ----------------------------------------------------------------

" don't use linter, we use syntastic for that
let g:pymode_lint_on_write = 1
let g:pymode_lint_signs = 1

" don't fold python code on open
let g:pymode_folding = 1

" don't load rope by default. Change to 1 to use rope
let g:pymode_rope = 1

" open definitions on same window, and custom mappings for definitions and
" occurrences
let g:pymode_rope_goto_definition_bind = ',d'
let g:pymode_rope_goto_definition_cmd = 'e'
nmap ,D :tab split<CR>:PymodePython rope.goto()<CR>
nmap ,o :RopeFindOccurrences<CR>

" turn on documentation script
let g:pymode_doc = 1
let g:pymode_doc_bind = 'K'

" turn on running
let g:pymode_run = 1

" formatting
let g:formatter_yapf_style = 'pep8'

" mappings to toggle display, and to focus on it
let g:tabman_toggle = 'tl'
let g:tabman_focus  = 'tf'

" Autoclose ------------------------------------------------------------------

" Fix to let ESC work as espected with Autoclose plugin
let g:AutoClosePumvisible = {"ENTER": "\<C-Y>", "ESC": "\<ESC>"}

" DragVisuals ---------------------------------------------------------------

" mappings to move blocks in 4 directions
vmap <expr> <S-M-LEFT> DVB_Drag('left')
vmap <expr> <S-M-RIGHT> DVB_Drag('right')
vmap <expr> <S-M-DOWN> DVB_Drag('down')
vmap <expr> <S-M-UP> DVB_Drag('up')

" mapping to duplicate block
vmap <expr> D DVB_Duplicate()

" Signify --------------------------------------------------------------------

" this first setting decides in which order try to guess your current vcs
let g:signify_vcs_list = [ 'git', 'hg' ]

" mappings to jump to changed blocks
nmap <leader>sn <plug>(signify-next-hunk)
nmap <leader>sp <plug>(signify-prev-hunk)

" nicer colors
highlight DiffAdd           cterm=bold ctermbg=none ctermfg=119
highlight DiffDelete        cterm=bold ctermbg=none ctermfg=167
highlight DiffChange        cterm=bold ctermbg=none ctermfg=227
highlight SignifySignAdd    cterm=bold ctermbg=237  ctermfg=119
highlight SignifySignDelete cterm=bold ctermbg=237  ctermfg=167
highlight SignifySignChange cterm=bold ctermbg=237  ctermfg=227

" Window Chooser -------------------------------------------------------------

" mapping
nmap  -  <Plug>(choosewin)

" show big letters
let g:choosewin_overlay_enable = 1

" Airline --------------------------------------------------------------------

let g:airline_powerline_fonts = 1
let g:airline_theme = 'dark'
let g:airline#extensions#whitespace#enabled = 0

" to use fancy symbols for airline, uncomment the following lines and use a
" patched font (more info on the README.rst)
if !exists('g:airline_symbols')
   let g:airline_symbols = {}
endif
let g:airline_left_sep = '⮀'
let g:airline_left_alt_sep = '⮁'
let g:airline_right_sep = '⮂'
let g:airline_right_alt_sep = '⮃'
let g:airline_symbols.branch = '⭠'
let g:airline_symbols.readonly = '⭤'
let g:airline_symbols.linenr = '⭡'

" Sourcebeautify -------------------------------------------------------------

au BufRead,BufNewFile *.json setf json

" JsBeautify -----------------------------------------------------------------

map <c-f> :call JsBeautify()<cr>
autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<cr>
autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>

" Vim leader ----------------------------------------------------------------

let mapleader = ","

" Table mode ----------------------------------------------------------------

let g:table_mode_corner_corner="+"
let g:table_mode_header_fillchar="="

" Pynvim --------------------------------------------------------------------

let g:python3_host_prog="/usr/bin/python"

" C-Support -----------------------------------------------------------------

let g:C_UseTool_cmake    = 'yes'
let g:C_UseTool_doxygen  = 'yes'

" CPP Manual ----------------------------------------------------------------

command! -nargs=+ Cppman silent! call system("tmux split-window cppman " . expand(<q-args>))
autocmd FileType cpp nnoremap <silent><buffer> K <Esc>:Cppman <cword><CR>

" Autoformat ----------------------------------------------------------------

" Formate when saving a file
au BufWrite * :Autoformat

" Disable vim's indent file, retabbing and removing trailing whitespace
let g:autoformat_autoindent = 0
let g:autoformat_retab = 0
let g:autoformat_remove_trailing_spaces = 0

" NERDCommenter -------------------------------------------------------------

let g:NERDSpaceDelims = 1
let g:NERDTrimTrailingWhitespace = 1

" Build ---------------------------------------------------------------------

"nnoremap ,b :!gcc % -o %:r.o <CR>
setlocal makeprg=make\ %:r.o
function Build()
    setlocal bt=nofile bh=wipe nobl noswf ro
    exe 'set bt=nofile bh=wipe nobl noswf ro splitbelow | new | read !gcc --version'
endfunction
nnoremap ,b :call Build() <CR>

" Gutentags ------------------------------------------------------------------- 
let g:gutentags_add_default_project_roots = 0
let g:gutentags_project_root = ['.git', 'Makefile', 'package.json']
let g:gutentags_generate_on_new = 1
let g:gutentags_generate_on_missing = 1
let g:gutentags_generate_on_write = 1
let g:gutentags_generate_on_empty_buffer = 0
set statusline+=%{gutentags#statusline()}

" Clang-complete -------------------------------------------------------------- 
let g:clang_library_path = '/usr/lib/x86_64-linux-gnu/'

" Python ---------------------------------------------------------------------- 
au FileType python set omnifunc=pythoncomplete#Complete
au FileType python setlocal expandtab shiftwidth=4 tabstop=4 smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class,with
au BufRead *.py set efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m
au FileType python set foldmethod=indent foldlevel=99

" Run pyflake8
autocmd FileType python map <Leader>8 :call Flake8()<CR>

" Run when saving py files
autocmd BufWritePost *.py call Flake8()

" Ignore Errors
let g:flake8_ignore="E501,W293"

